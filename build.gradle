import groovy.xml.QName

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

repositories {
    mavenCentral() // needed for nexus-workflow plugin and license-gradle-plugin
}


apply plugin: 'java'
compileJava.options.encoding = 'utf-8'
compileJava.sourceCompatibility = JavaVersion.VERSION_1_6
compileJava.targetCompatibility = JavaVersion.VERSION_1_6
compileTestJava.options.encoding = 'utf-8'
compileTestJava.sourceCompatibility = JavaVersion.VERSION_1_6
compileTestJava.targetCompatibility = JavaVersion.VERSION_1_6


apply plugin: 'findbugs'
findbugs {
    sourceSets = [project.sourceSets.main] // check only main classes, neither tests nor example workflow classes
    excludeFilter = file("$rootDir/common/findbugs-exclude-filter.xml")
    effort = "max"
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        // Unfortunately FindBugs cannot emit both XML and HTML report simultanously, so by default we emit HTML only.
        // We emit XML only when -PfindbugsXmlReportEnabled=true, e.g. during Jenkins build
        def findbugsXmlReportEnabled = project.hasProperty('findbugsXmlReportEnabled') && project.property('findbugsXmlReportEnabled')
        xml.enabled = findbugsXmlReportEnabled
        html.enabled = !findbugsXmlReportEnabled
    }
}

apply plugin: 'eclipse'
eclipse {
    classpath {
        defaultOutputDir = file('build')
        file {
            //exclude slf4f log binding from export
            withXml {
                Node root = it.asNode()
                NodeList nodeList = root.getAt(new QName('classpathentry'))
                nodeList.each { Node classpathentry ->
                    if (classpathentry.attributes().path.contains('slf4j-log4j12')) {
                        classpathentry.attributes().remove('exported')
                    }
                }
            }
        }
    }
    jdt {
        file {
            // add our code style settings to every eclipse project
            withProperties { properties ->
                def codestyle = new XmlParser().parse(file("$rootDir/config/eclipse-codestyle.xml"))
                codestyle.profile[0].setting.each {
                    properties.put(it.'@id', it.'@value')
                }
            }
            whenMerged {
                def uiprops = new Properties();
                uiprops.put('eclipse.preferences.version', '1')
                uiprops.put('formatter_profile', '_SCOOP-CodeStyle')
                uiprops.put('formatter_settings_version', '12')
                uiprops.store(file("$projectDir/.settings/org.eclipse.jdt.ui.prefs").newWriter(), "generated by build.gradle")
            }
        }
    }
}
// be sure to always regenerate eclipse files, because default behavior is merging into existing files
tasks.eclipse.dependsOn cleanEclipse
eclipse.classpath.defaultOutputDir = new File("$buildDir/classes/main")


sourceSets {
    workflow {
        ext.srcDir = "$projectDir/src/workflow/java"
    }
}
sourceSets.main.resources.srcDirs += sourceSets.workflow.srcDir
configurations {
    wsgen
}

sourceSets {
    schema {
        ext.srcDir = "$projectDir/src/main/schema"
    }
}
sourceSets.main.resources.srcDirs += sourceSets.schema.srcDir
dependencies {
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-simple:1.7.7'
    compile 'org.copper-engine:copper-coreengine:3.2.1'
    compile 'org.copper-engine:copper-jmx-interface:3.2.1'
    compile 'org.copper-engine:copper-spring:3.2.1'
    compile 'org.apache.derby:derby:10.10.1.1'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-api:1.7.5'

    compile('org.apache.cxf:cxf-rt-transports-http-jetty:2.5.3') {
        exclude module: 'spring-web'
    }
    compile('org.apache.cxf:cxf-rt-frontend-jaxws:2.5.3') {
        exclude module: 'spring-web'
    }
    compile 'org.eclipse.jetty:jetty-server:7.5.4.v20111024'
    compile 'commons-lang:commons-lang:2.6'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'

    wsgen 'org.apache.cxf:cxf-tools-wsdlto-core:2.6.0'
    wsgen 'org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:2.6.0'
    wsgen 'org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:2.6.0'
    wsgen 'org.apache.cxf:cxf-xjc-ts:2.2.12'
    wsgen 'com.sun.xml.bind:jaxb-xjc:2.2.4-1'
}

tasks.create(name: "gen_wsbindings") {
    ext.genDirName = "$projectDir/src/main/generated";

    inputs.dir file(sourceSets.schema.srcDir)
    outputs.dir file(ext.genDirName)

    doFirst {
        file(ext.genDirName).mkdirs()
    }
    doLast {
        fileTree(dir: sourceSets.schema.srcDir + "/wsdl", include: "**/*.wsdl", exclude: "common.wsdl").each {
            def wsdlFile ->
                javaexec {
                    main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
                    classpath = configurations.wsgen
                    // Add -DexitOnFinish=true so that WSDLToJava bails out with exit code 0 (on success) or 1 (on failure)
                    // so that the build aborts immediately on errors. If you don't set this property, the exit code is always 0.
                    systemProperty 'exitOnFinish', 'true'
                    args = ['-frontend', 'jaxws21',
                            '-db', 'jaxb',
                            '-xjc-extension',
                            '-impl', '-server', '-client', '-validate',
                            '-d', ext.genDirName,
                            '-wsdlLocation', 'classpath:wsdl/' + wsdlFile.name,
                            wsdlFile]
                }
        }
    }
}
sourceSets.main.java.srcDirs += gen_wsbindings.genDirName

compileJava.dependsOn gen_wsbindings
eclipseClasspath.dependsOn gen_wsbindings



jar {
    manifest.attributes provider: 'gradle'
}

//    task addMissingLicenseHeaders {
//        println "Replacing java source file headers in " + project.path
//
//        def licenseFile = file("$rootDir/common/apache-license-file.txt")
//        ant.loadfile(srcFile: licenseFile, property: 'licenseHeader')
//        def licenseHeader = "${ant.properties['licenseHeader']}"
//
//        ant.replaceregexp(match: '(/\\*.*\\*/.*)??^package ', flags: 'sm', replace: licenseHeader + "package ") {
//            fileset(dir: "$projectDir/src") {
//                include(name: '**/*.java')
//            }
//        }
//    }

javadoc {
    options.encoding = "UTF-8"
}


task runHello (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.simple.HelloWorldTestApplication"
}

task runEngine (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.Main"
}

task runService (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.simulators.servers.ServiceSimulatorMain"
}

task sendMessage (type: JavaExec, dependsOn: classes){
    classpath = sourceSets.main.runtimeClasspath
    main = "org.copperengine.examples.orchestration.simulators.clients.OrchestrationServiceTestClient"
    args = ["http://localhost:9090/orchestration?wsdl","491716677889","sc00p"]
}
